language: cpp

env:
  global:
    - BIN=hh-cache-sim

matrix:
  include:
    - os: linux
      dist: xenial
      sudo: require
      addons:
        apt:
          sources:
            # Add ppa for gcc-7
            - sourceline: "ppa:ubuntu-toolchain-r/test"
            # Set ppa to get a modern version of qt
            - sourceline: "ppa:beineri/opt-qt-5.15.0-xenial"
          packages:
            - g++-7
            - git
      env:
        - APPIMAGE="true"
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"

    #- os: linux
    #  dist: xenial
    #  sudo: require
    #  services: docker
    #  env: WEBASM="true"

    - os: osx
      osx_image: xcode10.1
      compiler: clang
      env:
        - DMG="true"
        - MATRIX_EVAL="COMPILER=clang++"

install:
  - |
    if [ ! -z "${APPIMAGE}" ]; then
      export QTV=qt515
      sudo apt update -qq
      echo "Installing qt libraries"
      sudo apt install build-essential ${QTV}base \
      ${QTV}quickcontrols ${QTV}quickcontrols2 \
      ${QTV}graphicaleffects ${QTV}svg ${QTV}scxml libgl1-mesa-dev
      export ARTIFACT="$BIN*.AppImage"
    fi
  - |
    if [ ! -z "${DMG}" ]; then
      echo "Download last version of Qt with brew"
      brew update > /dev/null
      brew install qt5
      chmod -R 755 /usr/local/opt/qt5/*
      export QTDIR="/usr/local/opt/qt5"
      export PATH="$QTDIR/bin:$PATH"
      export ARTIFACT="$BIN*.dmg"
    fi

script:
  - eval "${MATRIX_EVAL}"
  - |
    if [ ! -z "${APPIMAGE}" ]; then
      echo "Loading qt env"
      source /opt/qt*/bin/qt*-env.sh
      echo "Build project"
      mkdir build && cd build
      qmake ..
      make
      echo "Create deploy folder"
      mkdir deploy
      cp ../$BIN.desktop deploy/
      cp ../icon.png deploy/
      mv $BIN deploy/
      echo "Donwloading and runing linuxdeployqt"
      wget -c "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
      chmod a+x linuxdeployqt*.AppImage
      unset QTDIR; unset QT_PLUGIN_PATH ; unset LD_LIBRARY_PATH
      mkdir -p deploy/usr/share/doc/libc6/
      cp /usr/share/doc/libc6/copyright deploy/usr/share/doc/libc6/copyright
      ./linuxdeployqt-continuous-x86_64.AppImage deploy/$BIN.desktop -unsupported-allow-new-glibc -bundle-non-qt-libs -extra-plugins=iconengines,imageformats -verbose=2 -qmldir=../qml -appimage
      mv $BIN*.AppImage $BIN.AppImage
    fi
  #- |
  #  if [ ! -z "${WEBASM}" ]; then
  #    mkdir build
  #    docker run -v "$PWD/build:/project/build" -v "$PWD:/project/source" maukalinow/qtwasm_builder:5.15_latest
  #    rm -rf build/{Makefile,*.o,*.cpp}
  #    mv build/* .
  #    rm -rf build
  #    sudo mv $BIN.html index.html
  #  fi
  - |
    if [ ! -z "${DMG}" ]; then
      echo "Build project"
      mkdir build && cd build
      qmake ..
      make
      echo "Run macdeployqt"
      macdeployqt $BIN.app/ -qmldir=../qml -dmg
      #find . | grep dmg
    fi

after_success:
  - wget -c https://github.com/probonopd/uploadtool/raw/master/upload.sh
  - |
    if [ ! -z "${APPIMAGE}" ]; then
      bash ./upload.sh $ARTIFACT
    fi
  #- |
  #  if [ ! -z "${WEBASM}" ];then
  #    zip -r wasm.zip .
  #    bash ./upload.sh wasm.zip
  #  fi
  - |
    if [ ! -z "${DMG}" ]; then
      bash ./upload.sh $ARTIFACT
    fi
